
Sparse matrix
From Wikipedia, the free encyclopedia

This is the current revision of this page, as edited by Citation bot ( talk | contribs ) at 14:28, 2 March 2021 (Alter: title, pages. Add: bibcode, s2cid, doi, pages, authors 1-1. Removed parameters. Formatted dashes . Some additions/deletions were parameter name changes. | Use this bot . Report bugs . | Suggested by Abductive | via #UCB_webform 1417/1999) . The present address (URL) is a permanent link to this version.
Revision as of 14:28, 2 March 2021 by
( diff ) ← Previous revision | Latest revision (diff) | Newer revision → (diff)
Jump to navigation Jump to search
Example of sparse matrix
( 11 22 0 0 0 0 0 0 33 44 0 0 0 0 0 0 55 66 77 0 0 0 0 0 0 0 88 0 0 0 0 0 0 0 99 ) {\displaystyle \left({\begin{smallmatrix}11&22&0&0&0&0&0\\0&33&44&0&0&0&0\\0&0&55&66&77&0&0\\0&0&0&0&0&88&0\\0&0&0&0&0&0&99\\\end{smallmatrix}}\right)} \left({\begin{smallmatrix}11&22&0&0&0&0&0\\0&33&44&0&0&0&0\\0&0&55&66&77&0&0\\0&0&0&0&0&88&0\\0&0&0&0&0&0&99\\\end{smallmatrix}}\right)
The above sparse matrix contains only 9 nonzero elements, with 26 zero elements. Its sparsity is 74%, and its density is 26%.
A sparse matrix obtained when solving a finite element problem in two dimensions. The non-zero elements are shown in black.

In numerical analysis and scientific computing , a sparse matrix or sparse array is a matrix in which most of the elements are zero. There is no strict definition how many elements need to be zero for a matrix to be considered sparse but a common criterion is that the number of non-zero elements is roughly the number of rows or columns. By contrast, if most of the elements are nonzero, then the matrix is considered dense . The number of zero-valued elements divided by the total number of elements (e.g., m × n for an m × n matrix) is sometimes referred to as the sparsity of the matrix.

Conceptually, sparsity corresponds to systems with few pairwise interactions. For example, consider a line of balls connected by springs from one to the next: this is a sparse system as only adjacent balls are coupled. By contrast, if the same line of balls had springs connecting each ball to all other balls, the system would correspond to a dense matrix. The concept of sparsity is useful in combinatorics and application areas such as network theory and numerical analysis , which typically have a low density of significant data or connections. Large sparse matrices often appear in scientific or engineering applications when solving partial differential equations .

When storing and manipulating sparse matrices on a computer , it is beneficial and often necessary to use specialized algorithms and data structures that take advantage of the sparse structure of the matrix. Specialized computers have been made for sparse matrices, [1] as they are common in the machine learning field. [2] Operations using standard dense-matrix structures and algorithms are slow and inefficient when applied to large sparse matrices as processing and memory are wasted on the zeros. Sparse data is by nature more easily compressed and thus requires significantly less storage . Some very large sparse matrices are infeasible to manipulate using standard dense-matrix algorithms.
Contents

    1 Storing a sparse matrix
        1.1 Dictionary of keys (DOK)
        1.2 List of lists (LIL)
        1.3 Coordinate list (COO)
        1.4 Compressed sparse row (CSR, CRS or Yale format)
        1.5 Compressed sparse column (CSC or CCS)
    2 Special structure
        2.1 Banded
        2.2 Diagonal
        2.3 Symmetric
        2.4 Block diagonal
    3 Reducing fill-in
    4 Solving sparse matrix equations
    5 Software
    6 History
    7 See also
    8 Notes
    9 References
    10 Further reading

Storing a sparse matrix [ edit ]

A matrix is typically stored as a two-dimensional array. Each entry in the array represents an element a i , j of the matrix and is accessed by the two indices i and j . Conventionally, i is the row index, numbered from top to bottom, and j is the column index, numbered from left to right. For an m × n matrix, the amount of memory required to store the matrix in this format is proportional to m × n (disregarding the fact that the dimensions of the matrix also need to be stored).

In the case of a sparse matrix, substantial memory requirement reductions can be realized by storing only the non-zero entries. Depending on the number and distribution of the non-zero entries, different data structures can be used and yield huge savings in memory when compared to the basic approach. The trade-off is that accessing the individual elements becomes more complex and additional structures are needed to be able to recover the original matrix unambiguously.

Formats can be divided into two groups:

    Those that support efficient modification, such as DOK (Dictionary of keys), LIL (List of lists), or COO (Coordinate list). These are typically used to construct the matrices.
    Those that support efficient access and matrix operations, such as CSR (Compressed Sparse Row) or CSC (Compressed Sparse Column).

Dictionary of keys (DOK) [ edit ]

DOK consists of a dictionary that maps (row, column) - pairs to the value of the elements. Elements that are missing from the dictionary are taken to be zero. The format is good for incrementally constructing a sparse matrix in random order, but poor for iterating over non-zero values in lexicographical order. One typically constructs a matrix in this format and then converts to another more efficient format for processing. [3]
List of lists (LIL) [ edit ]

LIL stores one list per row, with each entry containing the column index and the value. Typically, these entries are kept sorted by column index for faster lookup. This is another format good for incremental matrix construction. [4]
Coordinate list (COO) [ edit ]

COO stores a list of (row, column, value) tuples. Ideally, the entries are sorted first by row index and then by column index, to improve random access times. This is another format that is good for incremental matrix construction. [5]
Compressed sparse row (CSR, CRS or Yale format) [ edit ]

The compressed sparse row (CSR) or compressed row storage (CRS) or Yale format represents a matrix M by three (one-dimensional) arrays, that respectively contain nonzero values, the extents of rows, and column indices. It is similar to COO, but compresses the row indices, hence the name. This format allows fast row access and matrix-vector multiplications ( M x ). The CSR format has been in use since at least the mid-1960s, with the first complete description appearing in 1967. [6]

The CSR format stores a sparse m × n matrix M in row form using three (one-dimensional) arrays (V, COL_INDEX, ROW_INDEX) . Let NNZ denote the number of nonzero entries in M . (Note that zero-based indices shall be used here.)

    The arrays V and COL_INDEX are of length NNZ , and contain the non-zero values and the column indices of those values respectively.

    The array ROW_INDEX is of length m + 1 and encodes the index in V and COL_INDEX where the given row starts. The last element is NNZ , i.e., the fictitious index in V immediately after the last valid index NNZ - 1 . [7] 

For example, the matrix

        ( 5 0 0 0 0 8 0 0 0 0 3 0 0 6 0 0 ) {\displaystyle {\begin{pmatrix}5&0&0&0\\0&8&0&0\\0&0&3&0\\0&6&0&0\\\end{pmatrix}}} {\displaystyle {\begin{pmatrix}5&0&0&0\\0&8&0&0\\0&0&3&0\\0&6&0&0\\\end{pmatrix}}} 

is a 4 × 4 matrix with 4 nonzero elements, hence

    V         = [ 5 8 3 6 ]
   COL_INDEX = [ 0 1 2 1 ]
   ROW_INDEX = [ 0 1 2 3 4 ] 

assuming a zero-indexed language.

To extract a row, we first define:

    row_start = ROW_INDEX[row]
   row_end   = ROW_INDEX[row + 1]

Then we take slices from V and COL_INDEX starting at row_start and ending at row_end.

To extract the row 1 (the second row) of this matrix we set row_start=1 and row_end=2 . Then we make the slices V[1:2] = [8] and COL_INDEX[1:2] = [1] . We now know that in row 1 we have one element at column 1 with value 8.

In this case the CSR representation contains 13 entries, compared to 16 in the original matrix. The CSR format saves on memory only when NNZ < ( m ( n − 1) − 1) / 2 . Another example, the matrix

    ( 10 20 0 0 0 0 0 30 0 40 0 0 0 0 50 60 70 0 0 0 0 0 0 80 ) {\displaystyle {\begin{pmatrix}10&20&0&0&0&0\\0&30&0&40&0&0\\0&0&50&60&70&0\\0&0&0&0&0&80\\\end{pmatrix}}} {\begin{pmatrix}10&20&0&0&0&0\\0&30&0&40&0&0\\0&0&50&60&70&0\\0&0&0&0&0&80\\\end{pmatrix}} 

is a 4 × 6 matrix (24 entries) with 8 nonzero elements, so

    V         = [ 10 20 30 40 50 60 70 80 ]
   COL_INDEX = [  0  1  1  3  2  3  4  5 ]   
   ROW_INDEX = [  0  2  4  7  8 ]


The whole is stored as 21 entries.

    ROW_INDEX splits the array V into rows: (10, 20) (30, 40) (50, 60, 70) (80) ;
    COL_INDEX aligns values in columns: (10, 20, ...) (0, 30, 0, 40, ...)(0, 0, 50, 60, 70, 0) (0, 0, 0, 0, 0, 80) .

Note that in this format, the first value of ROW_INDEX is always zero and the last is always NNZ , so they are in some sense redundant (although in programming languages where the array length needs to be explicitly stored, NNZ would not be redundant). Nonetheless, this does avoid the need to handle an exceptional case when computing the length of each row, as it guarantees the formula ROW_INDEX[ i + 1] − ROW_INDEX[ i ] works for any row i . Moreover, the memory cost of this redundant storage is likely insignificant for a sufficiently large matrix.

The (old and new) Yale sparse matrix formats are instances of the CSR scheme. The old Yale format works exactly as described above, with three arrays; the new format combines ROW_INDEX and COL_INDEX into a single array and handles the diagonal of the matrix separately. [8]

For logical adjacency matrices , the data array can be omitted, as the existence of an entry in the row array is sufficient to model a binary adjacency relation.

It is likely known as the Yale format because it was proposed in the 1977 Yale Sparse Matrix Package report from Department of Computer Science at Yale University. [9]
Compressed sparse column (CSC or CCS) [ edit ]

CSC is similar to CSR except that values are read first by column, a row index is stored for each value, and column pointers are stored. For example, CSC is (val, row_ind, col_ptr) , where val is an array of the (top-to-bottom, then left-to-right) non-zero values of the matrix; row_ind is the row indices corresponding to the values; and, col_ptr is the list of val indexes where each column starts. The name is based on the fact that column index information is compressed relative to the COO format. One typically uses another format (LIL, DOK, COO) for construction. This format is efficient for arithmetic operations, column slicing, and matrix-vector products. See scipy.sparse.csc_matrix . This is the traditional format for specifying a sparse matrix in MATLAB (via the sparse function).


Special structure [ edit ]
Banded [ edit ]
Main article: Band matrix

An important special type of sparse matrices is band matrix , defined as follows. The lower bandwidth of a matrix A is the smallest number p such that the entry a i , j vanishes whenever i > j + p . Similarly, the upper bandwidth is the smallest number p such that a i , j = 0 whenever i < j − p ( Golub & Van Loan 1996 , §1.2.1). For example, a tridiagonal matrix has lower bandwidth 1 and upper bandwidth 1 . As another example, the following sparse matrix has lower and upper bandwidth both equal to 3. Notice that zeros are represented with dots for clarity.

        ( X X X ⋅ ⋅ ⋅ ⋅ X X ⋅ X X ⋅ ⋅ X ⋅ X ⋅ X ⋅ ⋅ ⋅ X ⋅ X ⋅ X ⋅ ⋅ X X ⋅ X X X ⋅ ⋅ ⋅ X X X ⋅ ⋅ ⋅ ⋅ ⋅ X ⋅ X ) {\displaystyle \left({\begin{smallmatrix}X&X&X&\cdot &\cdot &\cdot &\cdot &\\X&X&\cdot &X&X&\cdot &\cdot &\\X&\cdot &X&\cdot &X&\cdot &\cdot &\\\cdot &X&\cdot &X&\cdot &X&\cdot &\\\cdot &X&X&\cdot &X&X&X&\\\cdot &\cdot &\cdot &X&X&X&\cdot &\\\cdot &\cdot &\cdot &\cdot &X&\cdot &X&\\\end{smallmatrix}}\right)} \left({\begin{smallmatrix}X&X&X&\cdot &\cdot &\cdot &\cdot &\\X&X&\cdot &X&X&\cdot &\cdot &\\X&\cdot &X&\cdot &X&\cdot &\cdot &\\\cdot &X&\cdot &X&\cdot &X&\cdot &\\\cdot &X&X&\cdot &X&X&X&\\\cdot &\cdot &\cdot &X&X&X&\cdot &\\\cdot &\cdot &\cdot &\cdot &X&\cdot &X&\\\end{smallmatrix}}\right) 

Matrices with reasonably small upper and lower bandwidth are known as band matrices and often lend themselves to simpler algorithms than general sparse matrices; or one can sometimes apply dense matrix algorithms and gain efficiency simply by looping over a reduced number of indices.

By rearranging the rows and columns of a matrix A it may be possible to obtain a matrix A ′ with a lower bandwidth. A number of algorithms are designed for bandwidth minimization .
Diagonal [ edit ]

A very efficient structure for an extreme case of band matrices, the diagonal matrix , is to store just the entries in the main diagonal as a one-dimensional array , so a diagonal n × n matrix requires only n entries.
Symmetric [ edit ]

A symmetric sparse matrix arises as the adjacency matrix of an undirected graph ; it can be stored efficiently as an adjacency list .
Block diagonal [ edit ]

A block-diagonal matrix consists of sub-matrices along its diagonal blocks. A block-diagonal matrix A has the form

    A = [ A 1 0 ⋯ 0 0 A 2 ⋯ 0 ⋮ ⋮ ⋱ ⋮ 0 0 ⋯ A n ] , {\displaystyle \mathbf {A} ={\begin{bmatrix}\mathbf {A} _{1}&0&\cdots &0\\0&\mathbf {A} _{2}&\cdots &0\\\vdots &\vdots &\ddots &\vdots \\0&0&\cdots &\mathbf {A} _{n}\end{bmatrix}},} {\displaystyle \mathbf {A} ={\begin{bmatrix}\mathbf {A} _{1}&0&\cdots &0\\0&\mathbf {A} _{2}&\cdots &0\\\vdots &\vdots &\ddots &\vdots \\0&0&\cdots &\mathbf {A} _{n}\end{bmatrix}},} 

where A k is a square matrix for all k = 1, ..., n .
Reducing fill-in [ edit ]

The fill-in of a matrix are those entries that change from an initial zero to a non-zero value during the execution of an algorithm. To reduce the memory requirements and the number of arithmetic operations used during an algorithm, it is useful to minimize the fill-in by switching rows and columns in the matrix. The symbolic Cholesky decomposition can be used to calculate the worst possible fill-in before doing the actual Cholesky decomposition .

There are other methods than the Cholesky decomposition in use. Orthogonalization methods (such as QR factorization) are common, for example, when solving problems by least squares methods. While the theoretical fill-in is still the same, in practical terms the "false non-zeros" can be different for different methods. And symbolic versions of those algorithms can be used in the same manner as the symbolic Cholesky to compute worst case fill-in.
Solving sparse matrix equations [ edit ]

Both iterative and direct methods exist for sparse matrix solving.

Iterative methods, such as conjugate gradient method and GMRES utilize fast computations of matrix-vector products A x i {\displaystyle Ax_{i}} Ax_{i} , where matrix A {\displaystyle A} A is sparse. The use of preconditioners can significantly accelerate convergence of such iterative methods.
Software [ edit ]

Many software libraries support sparse matrices, and provide solvers for sparse matrix equations. The following are open-source:

    SuiteSparse , a suite of sparse matrix algorithms, geared toward the direct solution of sparse linear systems.
    PETSc , a large C library, containing many different matrix solvers for a variety of matrix storage formats.
    Trilinos , a large C++ library, with sub-libraries dedicated to the storage of dense and sparse matrices and solution of corresponding linear systems.
    Eigen3 is a C++ library that contains several sparse matrix solvers. However, none of them are parallelized .
    MUMPS ( MU ltifrontal M assively P arallel sparse direct S olver), written in Fortran90, is a frontal solver .
    DUNE , a finite element library that also has a sub-library for sparse linear systems and their solution.
    PaStix .
    SuperLU .
    Armadillo provides a user-friendly C++ wrapper for BLAS and LAPACK.
    SciPy provides support for several sparse matrix formats, linear algebra, and solvers.
    SPArse Matrix (spam) R package for sparse matrices.
    Wolfram Language Tools for handling sparse arrays
    ALGLIB is a C++ and C# library with sparse linear algebra support
    ARPACK Fortran 77 library for sparse matrix diagonalization and manipulation, using the Arnoldi algorithm
    SPARSE Reference (old) NIST package for (real or complex) sparse matrix diagonalization
    SLEPc Library for solution of large scale linear systems and sparse matrices
    Sympiler , a domain-specific code generator and library for solving linear systems and quadratic programming problems.

History [ edit ]

The term sparse matrix was possibly coined by Harry Markowitz who initiated some pioneering work but then left the field. [10]
See also [ edit ]

    Matrix representation
    Pareto principle
    Ragged matrix
    Single-entry matrix
    Skyline matrix
    Sparse graph code
    Sparse file
    Harwell-Boeing file format
    Matrix Market exchange formats 

Notes [ edit ]

    ^ "Cerebras Systems Unveils the Industry's First Trillion Transistor Chip" . www.businesswire.com . 2019-08-19 . Retrieved 2019-12-02 . " The WSE contains 400,000 AI-optimized compute cores. Called SLAC™ for Sparse Linear Algebra Cores, the compute cores are flexible, programmable, and optimized for the sparse linear algebra that underpins all neural network computation"
    ^ "Argonne National Laboratory Deploys Cerebras CS-1, the World's Fastest Artificial Intelligence Computer | Argonne National Laboratory" . www.anl.gov (Press release) . Retrieved 2019-12-02 . " The WSE is the largest chip ever made at 46,225 square millimeters in area, it is 56.7 times larger than the largest graphics processing unit. It contains 78 times more AI optimized compute cores, 3,000 times more high speed, on-chip memory, 10,000 times more memory bandwidth, and 33,000 times more communication bandwidth."
    ^ See scipy.sparse.dok_matrix
    ^ See scipy.sparse.lil_matrix
    ^ See scipy.sparse.coo_matrix
    ^ Buluç, Aydın; Fineman, Jeremy T.; Frigo, Matteo; Gilbert, John R.; Leiserson, Charles E. (2009). Parallel sparse matrix-vector and matrix-transpose-vector multiplication using compressed sparse blocks (PDF) . ACM Symp. on Parallelism in Algorithms and Architectures. CiteSeerX   10.1.1.211.5256 . CS1 maint: discouraged parameter ()
    ^ Saad, Yousef (2003). Iterative methods for sparse linear systems . SIAM.
    ^ Bank, Randolph E.; Douglas, Craig C. (1993), "Sparse Matrix Multiplication Package (SMMP)" (PDF) , Advances in Computational Mathematics , 1 : 127–137, doi : 10.1007/BF02070824 , S2CID   6412241
    ^ Eisenstat, S. C.; Gursky, M. C.; Schultz, M. H.; Sherman, A. H. (April 1977). "Yale Sparse Matrix Package" (PDF) . Retrieved 6 April 2019 .
    ^ Oral history interview with Harry M. Markowitz , pp. 9, 10.

References [ edit ]

    Golub, Gene H. ; Van Loan, Charles F. (1996). Matrix Computations (3rd ed.). Baltimore: Johns Hopkins. ISBN   978-0-8018-5414-9 .
    Stoer, Josef; Bulirsch, Roland (2002). Introduction to Numerical Analysis (3rd ed.). Berlin, New York: Springer-Verlag . ISBN   978-0-387-95452-3 .
    Tewarson, Reginald P. (May 1973). Sparse Matrices (Part of the Mathematics in Science & Engineering series) . Academic Press Inc. (This book, by a professor at the State University of New York at Stony Book, was the first book exclusively dedicated to Sparse Matrices. Graduate courses using this as a textbook were offered at that University in the early 1980s).
    Bank, Randolph E.; Douglas, Craig C. "Sparse Matrix Multiplication Package" (PDF) .
    Pissanetzky, Sergio (1984). Sparse Matrix Technology . Academic Press.
    Snay, Richard A. (1976). "Reducing the profile of sparse symmetric matrices". Bulletin Géodésique . 50 (4): 341–352. Bibcode : 1976BGeod..50..341S . doi : 10.1007/BF02521587 . hdl : 2027/uc1.31210024848523 . S2CID   123079384 . Also NOAA Technical Memorandum NOS NGS-4, National Geodetic Survey, Rockville, MD. [1] 


Further reading [ edit ]

    Gibbs, Norman E.; Poole, William G.; Stockmeyer, Paul K. (1976). "A comparison of several bandwidth and profile reduction algorithms" . ACM Transactions on Mathematical Software . 2 (4): 322–330. doi : 10.1145/355705.355707 . S2CID   14494429 .
    Gilbert, John R.; Moler, Cleve; Schreiber, Robert (1992). "Sparse matrices in MATLAB: Design and Implementation" . SIAM Journal on Matrix Analysis and Applications . 13 (1): 333–356. CiteSeerX   10.1.1.470.1054 . doi : 10.1137/0613024 .
    Sparse Matrix Algorithms Research at the Texas A&M University.
    SuiteSparse Matrix Collection
    SMALL project A EU-funded project on sparse models, algorithms and dictionary learning for large-scale data.

show

    v
    t
    e 

Data structures
show

    v
    t
    e 

Numerical linear algebra

    ^ Saad, Yousef (2003). Iterative methods for sparse linear systems . SIAM.

Retrieved from ""
Categories :

    Sparse matrices 

Hidden categories:
Navigation menu

    Not logged in
    Talk
    Contributions
    Create account
    Log in 

    Article
    Talk 

    Read
    Edit
    View history 

Search

    Main page
    Contents
    Current events
    Random article
    About Wikipedia
    Contact us
    Donate 

Contribute

    Help
    Learn to edit
    Community portal
    Recent changes
    Upload file 

Tools

    What links here
    Related changes
    Special pages
    Permanent link
    Page information
    Cite this page
    Wikidata item 

Print/export

    Download as PDF
    Printable version 

In other projects

    Wikimedia Commons 

Languages

    Deutsch
    Español
    Français
    한국어
    Bahasa Indonesia
    日本語
    Português
    Русский
    中文
    12 more 

Edit links

    This page was last edited on 2 March 2021, at 14:28  (UTC) .
    Text is available under the Creative Commons Attribution-ShareAlike License ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Mobile view
    Developers
    Statistics
    Cookie statement

    Wikimedia Foundation
    Powered by MediaWiki

